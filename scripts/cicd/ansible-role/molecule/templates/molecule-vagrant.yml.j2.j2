---

dependency:
  name: galaxy
driver:
  name: vagrant
<% if molecule.provider is defined and molecule.provider | length > 0 %>
  provider:
    name: <= molecule.provider =>
    type: <= molecule.provider =>
<% endif %>
lint: |
  set -e
  yamllint .
  ln -fs molecule/default/requirements.yml
  ansible-lint
  rm -f requirements.yml
platforms:
{% for platform in MOLECULE_DISTROS %}
<% for node in molecule.nodes|default([]) %>
  - name: <= generic.role_short | replace('_', '-') =>-{{ platform.name }}-<= node.name =>
    box: "{{ platform.box }}"
    memory: {{ platform.memory | default(2048) }}
    cpus: {{ platform.cpus | default(2) }}
{% if platform.interfaces is defined %}
    interfaces: {{ platform.interfaces }}
{% endif %}
{% if platform.provider is defined %}
    provider: {{ platform.provider }}
{% endif %}
{% if platform.provider_options is defined %}
    provider_options: {{ platform.provider_options }}
{% endif %}
{% if platform.provider_raw_config_args is defined %}
    provider_raw_config_args: {{ platform.provider_raw_config_args }}
{% endif %}
{% if platform.instance_raw_config_args is defined %}
    instance_raw_config_args: {{ platform.instance_raw_config_args }}
{% endif %}
    config_options:
      ssh.keep_alive: yes
      ssh.remote_user: "vagrant"
    groups:
{% if platform.groups is undefined or platform.groups | length == 0 %}
{% set __platform_groups = [ 'linux' ] %}
{% else %}
{% set __platform_groups = platform.groups %}
{% endif %}
{% for group in __platform_groups %}
      - {{ group }}
{% endfor %}
<% for group in node.groups|default([]) %>
      - {{ group }}
<% endfor %>
<% endfor %>
{% endfor %}
provisioner:
  name: ansible
{% if MOLECULE_ANSIBLE_ARGS is defined %}
  ansible_args:
{% for molecule_ansible_arg in MOLECULE_ANSIBLE_ARGS %}
    - {{ molecule_ansible_arg }}
{% endfor %}
{% endif %}
  env:
    ANSIBLE_PIPELINING: "True"
    ANSIBLE_VERBOSITY: <= molecule.ansible.verbosity | default(0) =>
    ANSIBLE_LIBRARY: '{{ Ansible_driver_libary }}'
  lint:
    name: ansible-lint
  playbooks:
    converge: ${MOLECULE_PLAYBOOK:-converge.yml}
  inventory:
<% set __group_vars = {"linux":{"ansible_user":"vagrant","ansible_password":"vagrant"},"windows":{"ansible_user":"vagrant","ansible_password":"vagrant","ansible_become_user":"vagrant","ansible_become_method":"runas","ansible_connection":"ssh","ansible_shell_type":"cmd"}} %>
<% if molecule.group_vars is defined %>
    group_vars: <= __group_vars | combine(molecule.group_vars,recursive=true) | to_json =>
<% else %>
    group_vars: <= __group_vars | to_json =>
<% endif %>
<% if molecule.host_vars is defined or molecule.host_vars_static is defined %>
    host_vars:
<% if molecule.host_vars is defined %>
{% for platform in MOLECULE_DISTROS %}
<= molecule.host_vars | to_nice_yaml(indent=2) | indent(width=6,first=True) =>
{% endfor %}
<% endif %>
<% if molecule.host_vars_static is defined %>
<= molecule.host_vars_static | to_nice_yaml(indent=2) | indent(width=6,first=True) =>
<% endif %>
<% else %>
    host_vars: {}
<% endif %>
scenario:
  name: default
<% if molecule.scenario.test_sequence is defined %>
  test_sequence:
<% for item in molecule.scenario.test_sequence %>
    - <= item =>
<% endfor %>
<% endif %>
verifier:
  name: ansible
