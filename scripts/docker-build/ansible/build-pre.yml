---

# Create image using ansible and deploy an container
- name: Create image using ansible and deploy an container
  hosts: localhost
  # become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
    docker_build_refresh: "{{ lookup('env', 'DOCKER_BUILD_REFRESH') | bool }}"
    container_tool: "{{ lookup('env', 'DOCKER_BINARY') }}"

  tasks:

    - name: Load pipeline variable from file
      ansible.builtin.set_fact:
        build_vars: "{{ lookup('file', 'docker-settings.yml') | from_yaml }}"

    - name: Show settings
      ansible.builtin.debug:
        msg: "{{ build_vars }}"

    - name: Create temporary build directory
      ansible.builtin.tempfile:
        state: directory
        suffix: build
      register: _build_path

    - name: Defined build path
      ansible.builtin.set_fact:
        buildpath: "{{ _build_path.path }}"

    - name: Create Dockerfile from template
      ansible.builtin.template:
        src: "{{ lookup('env', 'SOURCE_PATH') + '/Dockerfile.j2' }}"
        dest: "{{ buildpath }}/Dockerfile"
        mode: "0644"

#    - name: Create intermediate Dockerfile from template
#      ansible.builtin.template:
#        src: "{{ lookup('env', 'SOURCE_PATH') + '/Dockerfile-intermediate.j2' }}"
#        dest: "{{ buildpath }}/Dockerfile-intermediate"
#        mode: "0644"
#      when: build_vars.image.intermediate is defined

    - name: Docker build phase
      when: docker_build_refresh
      block:

#        - name: Build intermediate image
#          community.docker.docker_image:
#            name: "{{ build_vars.image.intermediate }}"
#            source: build
#            build:
#              dockerfile: Dockerfile-intermediate
#              path: "{{ buildpath }}"
#              pull: true
#              args: "{{ docker_container_build_args | default(omit) }}"
#          register: _build
#          when:
#            - container_tool == 'docker'
#            - build_vars.image.intermediate is defined

        - name: Build image (docker)
          when: container_tool == 'docker'
          block:

            - name: Pull parent image (docker)
              community.docker.docker_image:
                name: "{{ build_vars.image.parent }}"
                source: pull

            - name: Retrieve parent image info
              community.docker.docker_image_info:
                name: "{{ build_vars.image.parent }}"
              register: __image_info

            - name: Show parent image specifics
              ansible.builtin.debug:
                msg:
                  Cmd: "{{ __image_info.images[0]['Config']['Cmd'] | default(None) }}"
                  Entrypoint: "{{ __image_info.images[0]['Config']['Entrypoint'] | default(None) }}"

            - name: Create image from Dockerfile (docker)
              community.docker.docker_image:
                name: "{{ build_vars.image.name }}"
                source: build
                build:
                  path: "{{ buildpath }}"
                  pull: true
                  args: "{{ docker_container_build_args | default(omit) }}"
              register: _build

            - name: Show build log
              ansible.builtin.debug:
                msg: "{{ _build.stdout_lines }}"
              when: _build.stdout is defined

            - name: Retrieve image info
              community.docker.docker_image_info:
                name: "{{ build_vars.image.name }}"
              register: __image_info

            - name: Show image specifics
              ansible.builtin.debug:
                msg:
                  Cmd: "{{ __image_info.images[0]['Config']['Cmd'] | default(None) }}"
                  Entrypoint: "{{ __image_info.images[0]['Config']['Entrypoint'] | default(None) }}"

            - name: Deploy container from new image
              community.docker.docker_container:
                name: "{{ build_vars.container.name }}"
                image: "{{ build_vars.image.name }}"
                container_default_behavior: no_defaults
                privileged: "{{ build_vars.container.priviledged | default(False) }}"
                volumes: "{{ build_vars.container.volumes | default(omit) }}"
                entrypoint: "{{ build_vars.container.entrypoint | default(omit) }}"
              when:
                - build_vars.container.name is defined


        - name: Build image (podman)
          when: container_tool == 'podman'
          become: "{{ 'yes' if build_vars.container.rootless | default(False) | bool else 'no' }}"
          block:

            - name: Pull parent image (podman)
              containers.podman.podman_image:
                name: "{{ build_vars.image.parent }}"

            - name: Retrieve image info
              containers.podman.podman_image_info:
                name: "{{ build_vars.image.parent }}"
              register: __image_info

            - name: Show image specifics
              ansible.builtin.debug:
                msg:
                  Cmd: "{{ __image_info.images[0]['Config']['Cmd'] | default(None) }}"
                  Entrypoint: "{{ __image_info.images[0]['Config']['Entrypoint'] | default(None) }}"

            - name: Create image from Dockerfile (podman)
              containers.podman.podman_image:
                name: "{{ build_vars.image.name }}"
                path: "{{ buildpath }}"
                build:
                  format: docker
                  file: "{{ buildpath }}/Dockerfile"
              register: _build

            - name: Show build log
              ansible.builtin.debug:
                msg: "{{ _build.stdout_lines }}"
              when: _build.stdout is defined

            - name: Run container
              containers.podman.podman_container:
                name: "{{ build_vars.container.name }}"
                image: "{{ build_vars.image.name }}"
                privileged: "{{ build_vars.container.priviledged | default(False) }}"
                volumes: "{{ build_vars.container.volumes | default(omit) }}"
                entrypoint: "{{ build_vars.container.entrypoint | default(omit) }}"
              when:
                - build_vars.container.name is defined


# Add container to inventory
- name: Add container to inventory
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
    docker_build_refresh: "{{ lookup('env', 'DOCKER_BUILD_REFRESH') | bool }}"
    container_tool: "{{ lookup('env', 'DOCKER_BINARY') }}"
  tasks:

    - name: Wait for 5 seconds
      ansible.builtin.pause:
        seconds: 5

    - name: Add container to inventory
      ansible.builtin.add_host:
        name: "{{ build_vars.container.name }}"
        ansible_connection: "{{ container_tool }}"
        ansible_host: "{{ build_vars.container.name }}"
        ansible_user: root
        # ansible_docker_extra_args: >-
        #   -H tcp://127.0.0.1:2375
        groups:
          - containers
      when: build_vars.container.name is defined
